package com.Nikita.lessons_11

fun main() {

//Задания в целом повторяют задачи с урока и служат для закрепления навыка, поэтому стараемся выполнять без переписывания с урока.
//Задание 1: Создание Пустого Словаря
//Создайте пустой неизменяемый словарь, где ключи и значения - целые числа.
    val pair: Map<Int, Int>
//Задание 2: Создание и Инициализация Словаря
//Создайте словарь, инициализированный несколькими парами "ключ-значение", где ключи - float, а значения - double
    val emptyMap: Map<Float, Double> = mapOf(13F to 1.1, 15F to 3.3)
//Задание 3: Создание Изменяемого Словаря
//Создайте изменяемый словарь, где ключи - целые числа, а значения - строки.
    val mutableSl = mutableMapOf<Int, String>(2 to "World")
//Задание 4: Добавление Элементов в Словарь
//Имея изменяемый словарь, добавьте в него новые пары "ключ-значение".
    mutableSl[3] = "Hello"
    println(mutableSl)
//Задание 5: Получение Значений из Словаря
//Используя словарь из предыдущего задания, извлеките значение, используя ключ. Попробуй получить значение с ключом,
// которого в словаре нет.
    println(mutableSl[33])
//Задание 6: Удаление Элементов из Словаря
//Удалите определенный элемент из изменяемого словаря по его ключу.
    mutableSl.remove(3)
    println(mutableSl)
//Задание 7: Перебор Словаря в Цикле
//Создайте словарь (ключи Double, значения Int) и выведи в цикле результат деления ключа на значение.
// Не забудь обработать деление на 0 (в этом случае выведи слово “бесконечность”)
    val map: MutableMap<Double, Int> = mutableMapOf(
        11.0 to 2,
        22.0 to 0,
        33.0 to 3,
    )
    for ((key, value) in map) {
        val result = if (value != 0) {
            key / value
        } else {
            "бесконечность"
        }
        println("Результат деления $key на $value: $result")
    }


//Задание 8: Перезапись Элементов Словаря
//Измените значение для существующего ключа в изменяемом словаре.
    val keyToChange = 33.0
    val newValue = 5

    if (map.containsKey(keyToChange)) {
        map[keyToChange] = newValue
    } else {
        println("Ключ $keyToChange не найден в словаре")

    }
    println(map)
//Задание 9: Сложение Двух Словарей
//Создайте два словаря и объедините их в третьем изменяемом словаре через циклы.
    val map1 = mutableMapOf(23.1 to 1, 33.2 to 3)
    val map2 = mutableMapOf(33.3 to 4, 44.4 to 5)
    val sumMap: MutableMap<Double, Int> = mutableMapOf()
    for ((key, value) in map1) {
        sumMap[key] = value
    }
    for ((key, value) in map2) {
        sumMap[key] = value
    }
    println(sumMap)

//Задание 10: Словарь с Сложными Типами
//Создайте словарь, где ключами являются строки, а значениями - списки целых чисел.
// Добавьте несколько элементов в этот словарь.
    val map3: MutableMap<String, MutableList<Int>> = mutableMapOf()
    map3["One"] = mutableListOf(1, 2, 3)
    map3["Two"] = mutableListOf(4, 5, 6)
    map3["Three"] = mutableListOf(7, 8, 9)
//Задание 11: Использование Множества в Качестве Значения
//Создай словарь, в котором ключи - это целые числа, а значения - изменяемые множества строк. Добавь данные в словарь.
// Получи значение по ключу (это должно быть множество строк) и добавь в это множество ещё строку. Распечатай полученное
// множество.
    val map4: MutableMap<Int, MutableSet<String>> = mutableMapOf()
    map4[2] = mutableSetOf("Первый", "Второй")
    map4[3] = mutableSetOf("Третий", "Четвертый")
    map4[2]?.add("55")
    println(map4)
//Задание 12: Поиск Элемента по Значению
//Создай словарь, где ключами будут пары чисел. Через перебор найди значение у которого пара будет содержать цифру 5 в
// качестве первого или второго значения.
    val dictionary: Map<Pair<Int, Int>, Double> = mapOf(
        Pair(1, 2) to 1.1,
        Pair(5, 3) to 2.2,
        Pair(4, 5) to 3.3
    )
    val result = dictionary.filter { (key, _) ->
        key.first == 5 || key.second == 5
    }
//Напиши решения задач. В каждом случае нужно проанализировать и подобрать оптимальный тип словаря.
//Задание 6: Словарь Библиотека
//Ключи - автор книги, значения - список книг
    val booksByAuthor: Map<String, List<String>> = mapOf(
        "Лев Толстой" to listOf("Война и мир", "Анна Каренина"),
        "Федор Достоевский" to listOf("Преступление и наказание", "Идиот"),
        "Александр Пушкин" to listOf("Евгений Онегин", "Руслан и Людмила"),
        "Михаил Булгаков" to listOf("Мастер и Маргарита", "Собачье сердце")
    )
//Задание 12: Справочник Растений
//Ключи - типы растений (например, "Цветы", "Деревья"), значения - списки названий растений
    val plantsByType: Map<String, List<String>> = mapOf(
        "Цветы" to listOf("Роза", "Тюльпан", "Лилия", "Гвоздика"),
        "Деревья" to listOf("Дуб", "Сосна", "Береза", "Клен"),

        )

//Задание 8: Четвертьфинала
//Ключи - названия спортивных команд, значения - списки игроков каждой команды
    val teams: Map<String, List<String>> = mapOf(
        "СКА" to listOf("1", "2", "3"),
        "ЦСКА" to listOf("4", "5", "6"),
    )

//Задание 9: Курс лечения
//Ключи - даты, значения - список препаратов принимаемых в дату
    val farma: MutableMap<Int, List<String>> = mutableMapOf()
    farma[1] = listOf("Парацетамол")
    farma[15] = listOf("Анальгин", "Корвалол")
}